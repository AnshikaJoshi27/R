# filter in dplyr
used to access particular rows in a dataset
used with pipe function (%>%)
example :
gapminder %>% filter(year==2007)
gapminder %>% filter(country=="United States",year == 2007) # filters observations where both conditions are true


# arrange in dplyr
used to arrange whole dataset according to a particular row in a dataset
used with pipe function (%>%)
example :
gapminder %>% arrange(year)
gapminder %>% arrange(desc(year)) # descending order


# using filter with arrange
gapminder %>% filter(year ==2007) %>% arrange(gdpPercap) # this helps us in complex querying


# mutate in dplyr
changes or adds a new column(variable) based on other variables
gapminder %>% mutate(pop = pop / 100)
#To add new column, just mention the new column name in LHS of mutate
gapminder %>%  mutate(gdp = gdpPercap * pop) 


# complex queries using all the above verbs of dplyr
gapminder %>% filter(year==2007) %>% mutate(gdp = gdpPercap * pop) %>% arrange(desc(gdp))


# Summarize 
used to find specific summaries(mean,sum, median,min, max etc.) in our data
gapminder_1952 <- gapminder %>% filter(year==1952)
gapminder_1952 %>% summarize(meanLifeExp = mean(lifeExp))
or
gapminder_1952 %>% summarize(meanLifeExp = mean(lifeExp) , totalPop = sum(pop)) 

# Group by 
what if you need to find the summary about each year in the dataset
we replace the filter(year == 1952) by group_by(year)
This helps us in finding summary for each year
example:
gapminder %>% group_by(year) %>% summarize(meanLifeExp = mean(lifeExp),totalPop=sum(pop))
gapminder %>% group_by(continent,year) %>% summarize(medianLifeExp = median(lifeExp),maxGdpPercap= max(gdpPercap))











